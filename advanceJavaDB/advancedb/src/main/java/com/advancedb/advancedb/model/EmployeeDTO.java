package com.advancedb.advancedb.model;

import java.io.Serializable;
import java.time.LocalDate;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;

// The EmployeeDTO (Data Transfer Object) class is used for transferring employee data, often used in API requests and responses.
// It contains the same fields as the Employee entity but may contain validations and constraints for input validation.

@Data // Lombok annotation that automatically generates getters, setters, equals, hashCode, and toString methods for the class.
public class EmployeeDTO implements Serializable {
    private static final long serialVersionUID = 1L; // Serial version UID for serialization purposes.

    @NotBlank(message = "Employee ID cannot be blank") // Ensures that empid cannot be empty or null.
    private String empid; // Employee ID (unique identifier).

    @NotBlank(message = "First name cannot be blank") // Ensures that fname cannot be empty or null.
    @Pattern(regexp = "^[a-zA-Z]+$", message = "First name can only contain letters") // Ensures that fname only contains letters.
    private String fname; // Employee's first name.

    @NotBlank(message = "Full name cannot be blank") // Ensures that fullname cannot be empty or null.
    @Pattern(regexp = "^[a-zA-Z\\s]+$", message = "Full name can only contain letters and spaces") // Ensures fullname only contains letters and spaces.
    private String fullname; // Employee's full name.

    @NotNull(message = "Date of birth cannot be null") // Ensures dob cannot be null.
    @Past(message = "Date of birth must be in the past") // Ensures dob is a date in the past.
    private LocalDate dob; // Employee's date of birth.

    @NotNull(message = "Date of joining cannot be null") // Ensures doj cannot be null.
    @PastOrPresent(message = "Date of joining cannot be in the future") // Ensures doj is not in the future.
    private LocalDate doj; // Employee's date of joining.

    @NotNull(message = "Salary cannot be null") // Ensures salary cannot be null.
    @Min(value = 1000, message = "Salary must be at least 1000") // Ensures salary is at least 1000.
    private Integer salary; // Employee's salary.

    @NotBlank(message = "ReportsTo cannot be blank") // Ensures reportsTo cannot be empty or null.
    private String reportsTo; // Employee ID of the reporting officer (supervisor/manager).

    @NotBlank(message = "Department name cannot be blank") // Ensures departmentName cannot be empty or null.
    @Size(max = 50, message = "Department name must be at most 50 characters long") // Ensures departmentName is no longer than 50 characters.
    private String departmentName; // Name of the department where the employee works.

    @NotBlank(message = "Rank description cannot be blank") // Ensures rankDesc cannot be empty or null.
    @Size(max = 50, message = "Rank description must be at most 50 characters long") // Ensures rankDesc is no longer than 50 characters.
    private String rankDesc; // Description of the employee's rank.

    @Pattern(regexp = "[A-Za-z0-9]+", message = "Client request ID must be alphanumeric") // Ensures clientReqId is alphanumeric.
    private String clientReqId; // ID associated with the client request (should be alphanumeric).

    // Getters and Setters are automatically generated by Lombok's @Data annotation.
}
